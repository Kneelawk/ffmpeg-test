// Generated by jextract

package org.ffmpeg.libswresample;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class swresample_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    public static MethodHandle swr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"swr_init");
    }
    /**
     * {@snippet :
     * int swr_init(struct SwrContext* s);
     * }
     */
    public static int swr_init(MemorySegment s) {
        var mh$ = swr_init$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swr_alloc_set_opts2$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"swr_alloc_set_opts2");
    }
    /**
     * {@snippet :
     * int swr_alloc_set_opts2(struct SwrContext** ps, const AVChannelLayout* out_ch_layout, enum AVSampleFormat out_sample_fmt, int out_sample_rate, const AVChannelLayout* in_ch_layout, enum AVSampleFormat in_sample_fmt, int in_sample_rate, int log_offset, void* log_ctx);
     * }
     */
    public static int swr_alloc_set_opts2(MemorySegment ps, MemorySegment out_ch_layout, int out_sample_fmt, int out_sample_rate, MemorySegment in_ch_layout, int in_sample_fmt, int in_sample_rate, int log_offset, MemorySegment log_ctx) {
        var mh$ = swr_alloc_set_opts2$MH();
        try {
            return (int)mh$.invokeExact(ps, out_ch_layout, out_sample_fmt, out_sample_rate, in_ch_layout, in_sample_fmt, in_sample_rate, log_offset, log_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swr_free$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"swr_free");
    }
    /**
     * {@snippet :
     * void swr_free(struct SwrContext** s);
     * }
     */
    public static void swr_free(MemorySegment s) {
        var mh$ = swr_free$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swr_convert_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"swr_convert_frame");
    }
    /**
     * {@snippet :
     * int swr_convert_frame(SwrContext* swr, AVFrame* output, const AVFrame* input);
     * }
     */
    public static int swr_convert_frame(MemorySegment swr, MemorySegment output, MemorySegment input) {
        var mh$ = swr_convert_frame$MH();
        try {
            return (int)mh$.invokeExact(swr, output, input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


